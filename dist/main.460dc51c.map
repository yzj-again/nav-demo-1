{"version":3,"sources":["main.js"],"names":["$siteList","$","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","url","$lastLi","find","simplifyUrl","replace","render","remove","forEach","node","index","$startLi","insertBefore","on","window","open","e","stopPropagation","splice","prompt","indexOf","push","toUpperCase","onbeforeunload","string","stringify","setItem","document","key","i","length","toLowerCase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,YAAYC,EAAE,WAAF,CAAlB;AACA,IAAMC,IAAIC,aAAaC,OAAb,CAAqB,GAArB,CAAV;AACA;AACA,IAAMC,UAAUC,KAAKC,KAAL,CAAWL,CAAX,CAAhB;AACA;AACA;AACA,IAAMM,UAAUH,WAAW,CAAC;AACxBI,UAAM,GADkB,EACbC,KAAK;AADQ,CAAD,EAExB;AACCD,UAAM,GADP,EACYC,KAAK;AADjB,CAFwB,CAA3B;AAKA,IAAMC,UAAUX,UAAUY,IAAV,CAAe,SAAf,CAAhB;AACA,IAAMC,cAAc,SAAdA,WAAc,CAACH,GAAD,EAAS;AAAC;AAC1B,WAAOA,IAAII,OAAJ,CAAY,UAAZ,EAAwB,EAAxB,EAA4BA,OAA5B,CAAoC,SAApC,EAA+C,EAA/C,EAAmDA,OAAnD,CAA2D,MAA3D,EAAmE,EAAnE,EAAuEA,OAAvE,CAA+E,MAA/E,EAAuF,EAAvF,CAAP,CADyB,CACyE;AACrG,CAFD;AAGA,IAAMC,SAAS,SAATA,MAAS,GAAM;AACjB;AACAf,cAAUY,IAAV,CAAe,eAAf,EAAgCI,MAAhC;AACA;AACAR,YAAQS,OAAR,CAAgB,UAACC,IAAD,EAAMC,KAAN,EAAgB;AAAC;AAC7B,YAAMC,WAAWnB,iFAGWiB,KAAKT,IAHhB,kDAIWI,YAAYK,KAAKR,GAAjB,CAJX,sQAYTW,YAZS,CAYIV,OAZJ,CAAjB;AAaAS,iBAASE,EAAT,CAAY,OAAZ,EAAoB,YAAI;AACrBC,mBAAOC,IAAP,CAAYN,KAAKR,GAAjB,EAAqB,OAArB;AACF,SAFD;AAGAU,iBAASE,EAAT,CAAY,OAAZ,EAAoB,QAApB,EAA6B,UAACG,CAAD,EAAK;AAC/BA,cAAEC,eAAF,GAD+B,CACZ;AAClBlB,oBAAQmB,MAAR,CAAeR,KAAf,EAAqB,CAArB;AACDJ;AACF,SAJD;AAKH,KAtBD;AAuBH,CA3BD;AA4BAA;AACAd,EAAE,YAAF,EAAgBqB,EAAhB,CAAmB,OAAnB,EAA4B,YAAM;AAC9B,QAAIZ,MAAMa,OAAOK,MAAP,CAAc,SAAd,CAAV;AACA,QAAIlB,IAAImB,OAAJ,CAAY,MAAZ,MAAwB,CAA5B,EAA+B;AAC3BnB,cAAM,iBAAiBA,GAAvB;AACH;AACDF,YAAQsB,IAAR,CAAa,EAACrB,MAAMI,YAAYH,GAAZ,EAAiB,CAAjB,EAAoBqB,WAApB,EAAP,EAA0CrB,KAAKA,GAA/C,EAAb,EAL8B,CAKmC;AACjEK;AACH,CAPD;AAQA;AACAQ,OAAOS,cAAP,GAAwB,YAAM;AAC1B,QAAMC,SAAS3B,KAAK4B,SAAL,CAAe1B,OAAf,CAAf,CAD0B,CACa;AACvC;AACA;AACAe,WAAOpB,YAAP,CAAoBgC,OAApB,CAA4B,GAA5B,EAAiCF,MAAjC,EAJ0B,CAIc;AAC3C,CALD;AAMA;AACA;;AAEA;AACAhC,EAAEmC,QAAF,EAAYd,EAAZ,CAAe,UAAf,EAA0B,UAACG,CAAD,EAAK;AAC3B;AACA,QAAMY,MAAIZ,EAAEY,GAAZ;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI9B,QAAQ+B,MAA5B,EAAoCD,GAApC,EAAyC;AACrC,YAAG9B,QAAQ8B,CAAR,EAAW7B,IAAX,CAAgB+B,WAAhB,OAAgCH,GAAnC,EAAuC;AACnCd,mBAAOC,IAAP,CAAYhB,QAAQ8B,CAAR,EAAW5B,GAAvB,EAA2B,OAA3B;AACH;AACJ;AAEJ,CATD;AAUA","file":"main.460dc51c.map","sourceRoot":"..\\src","sourcesContent":["const $siteList = $('.siteList');\r\nconst x = localStorage.getItem('x')\r\n//console.log(x)为null\r\nconst xObject = JSON.parse(x);\r\n//console.log(xObject)为null\r\n//第一次xObject等于空，不能直接等于\r\nconst hashMap = xObject || [{\r\n    logo: 'A', url: 'https://www.acfun.cn'\r\n}, {\r\n    logo: 'B', url: 'https://www.bilibili.com'\r\n}]\r\nconst $lastLi = $siteList.find('li.last');\r\nconst simplifyUrl = (url) => {//replace产生一个新的字符串\r\n    return url.replace('https://', '').replace('http://', '').replace('www.', '').replace(/\\/.*/, '');//正则表达式删掉/开头的内容\r\n}\r\nconst render = () => {\r\n    //只需要维护hashMap再此构建DOM树\r\n    $siteList.find('li:not(.last)').remove();\r\n    //找到所有li对象数组，唯独不找.last\r\n    hashMap.forEach((node,index) => {//foreach会给两个参数，\r\n        const $startLi = $(`<li>\r\n\r\n            <div class=\"site\">\r\n                <div class=\"logo\">${node.logo}</div>\r\n                <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n                    <div class=\"close\">\r\n                        <svg class=\"icon\" >\r\n                            <use xlink:href=\"#icon-close\"></use>\r\n                        </svg>\r\n                    </div>\r\n            </div>\r\n\r\n        </li>`).insertBefore($lastLi);\r\n        $startLi.on('click',()=>{\r\n           window.open(node.url,'_self');\r\n        });\r\n        $startLi.on('click','.close',(e)=>{\r\n           e.stopPropagation()//阻止冒泡\r\n            hashMap.splice(index,1);\r\n           render();\r\n        });\r\n    });\r\n}\r\nrender();\r\n$('.addButton').on('click', () => {\r\n    let url = window.prompt('请输入新增网址')\r\n    if (url.indexOf('http') !== 0) {\r\n        url = 'https://www.' + url;\r\n    }\r\n    hashMap.push({logo: simplifyUrl(url)[0].toUpperCase(), url: url})//也可以在css中用text-transform:uppercase\r\n    render();\r\n});\r\n//跳转页面时存储hashmap\r\nwindow.onbeforeunload = () => {\r\n    const string = JSON.stringify(hashMap);//是string\r\n    // console.log(string)\r\n    // console.log(hashMap)\r\n    window.localStorage.setItem('x', string)//本地存储x\r\n}\r\n//localStorage与cookie有关或用户硬盘满了，google恰好会删除ls\r\n//3.用户使用无痕模式\r\n\r\n// document.addEventListener()\r\n$(document).on('keypress',(e)=>{\r\n    //console.log(e.key)\r\n    const key=e.key;\r\n    for (let i = 0; i < hashMap.length; i++) {\r\n        if(hashMap[i].logo.toLowerCase()===key){\r\n            window.open(hashMap[i].url,'_self');\r\n        }\r\n    }\r\n\r\n})\r\n//no-minify不要压缩"]}